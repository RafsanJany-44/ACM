{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/rafsan/Documents/GitHub/practice_cell/blog/src/providers/AuthProvider.js\";\n\nimport React, { useState } from 'react';\nvar AuthContext = React.createContext();\n\nvar AuthProvider = function AuthProvider(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLogged = _useState2[0],\n      setisLogged = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentUser = _useState4[0],\n      setcurrentUser = _useState4[1];\n\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      currentUser: currentUser,\n      setcurrentUser: setcurrentUser,\n      isLogged: isLogged,\n      setisLogged: setisLogged\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport { AuthProvider, AuthContext };","map":{"version":3,"sources":["/Users/rafsan/Documents/GitHub/practice_cell/blog/src/providers/AuthProvider.js"],"names":["React","useState","AuthContext","createContext","AuthProvider","props","isLogged","setisLogged","currentUser","setcurrentUser","children"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AAEA,IAAMC,WAAW,GAAGF,KAAK,CAACG,aAAN,EAApB;;AAEA,IAAMC,YAAY,GAAC,SAAbA,YAAa,CAACC,KAAD,EAAS;AAAA,kBACGJ,QAAQ,CAAC,KAAD,CADX;AAAA;AAAA,MACnBK,QADmB;AAAA,MACVC,WADU;;AAAA,mBAESN,QAAQ,CAAC,EAAD,CAFjB;AAAA;AAAA,MAEnBO,WAFmB;AAAA,MAEPC,cAFO;;AAIxB,SACI,oBAAC,WAAD,CAAa,QAAb;AACA,IAAA,KAAK,EAAE;AACHD,MAAAA,WAAW,EAACA,WADT;AAEHC,MAAAA,cAAc,EAACA,cAFZ;AAGHH,MAAAA,QAAQ,EAACA,QAHN;AAIHC,MAAAA,WAAW,EAACA;AAJT,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOKF,KAAK,CAACK,QAPX,CADJ;AAWH,CAfD;;AAkBA,SAAQN,YAAR,EAAqBF,WAArB","sourcesContent":["import React,{useState} from 'react';\n\nconst AuthContext = React.createContext();\n\nconst AuthProvider=(props)=>{\n    let [isLogged,setisLogged]=useState(false);\n    let [currentUser,setcurrentUser]=useState({});\n\n    return(\n        <AuthContext.Provider\n        value={{\n            currentUser:currentUser,\n            setcurrentUser:setcurrentUser,\n            isLogged:isLogged,\n            setisLogged:setisLogged,\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n};\n\n\nexport {AuthProvider,AuthContext};\n"]},"metadata":{},"sourceType":"module"}