{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\n\nvar storeData = function storeData(key, value) {\n  return _regeneratorRuntime.async(function storeData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(key, value));\n\n        case 3:\n          console.log(\"Data Stored Successfully!\");\n          _context.next = 9;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\n\nvar storeDataJSON = function storeDataJSON(key, value) {\n  var jsonValue;\n  return _regeneratorRuntime.async(function storeDataJSON$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          jsonValue = JSON.stringify(value);\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(key, jsonValue));\n\n        case 4:\n          console.log(\"Data Stored Successfully!\");\n          _context2.next = 10;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\n\nvar getAllKeys = function getAllKeys() {\n  var keys;\n  return _regeneratorRuntime.async(function getAllKeys$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          keys = [];\n          _context3.prev = 1;\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getAllKeys());\n\n        case 4:\n          keys = _context3.sent;\n          return _context3.abrupt(\"return\", keys);\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](1);\n          console.log(_context3.t0);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n};\n\nvar mergeData = function mergeData(key, value) {\n  return _regeneratorRuntime.async(function mergeData$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(key, value));\n\n        case 3:\n          return _context4.abrupt(\"return\", true);\n\n        case 6:\n          _context4.prev = 6;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0);\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\n\nvar clear = function clear() {\n  return _regeneratorRuntime.async(function clear$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          AsyncStorage.clear();\n\n        case 1:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar getAllData = function getAllData() {\n  AsyncStorage.getAllKeys().then(function (keys) {\n    return AsyncStorage.multiGet(keys).then(function (result) {}).catch(function (e) {\n      console.log(e);\n    });\n  });\n};\n\nvar getData = function getData(key) {\n  var data;\n  return _regeneratorRuntime.async(function getData$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(key));\n\n        case 3:\n          data = _context6.sent;\n\n          if (!(data != null)) {\n            _context6.next = 8;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", data);\n\n        case 8:\n          console.log(\"No data with this key!\");\n\n        case 9:\n          _context6.next = 14;\n          break;\n\n        case 11:\n          _context6.prev = 11;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.log(_context6.t0);\n\n        case 14:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n};\n\nvar getDataJSON = function getDataJSON(key) {\n  var data, jsonData;\n  return _regeneratorRuntime.async(function getDataJSON$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(key));\n\n        case 3:\n          data = _context7.sent;\n\n          if (!(data != null)) {\n            _context7.next = 9;\n            break;\n          }\n\n          jsonData = JSON.parse(data);\n          return _context7.abrupt(\"return\", jsonData);\n\n        case 9:\n          return _context7.abrupt(\"return\", null);\n\n        case 10:\n          _context7.next = 15;\n          break;\n\n        case 12:\n          _context7.prev = 12;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.log(_context7.t0);\n\n        case 15:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[0, 12]], Promise);\n};\n\nvar removeData = function removeData(key) {\n  return _regeneratorRuntime.async(function removeData$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(key));\n\n        case 3:\n          return _context8.abrupt(\"return\", true);\n\n        case 6:\n          _context8.prev = 6;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.log(_context8.t0);\n\n        case 9:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\n\nexport { mergeData, clear, getAllData, getAllKeys, storeData, storeDataJSON, getData, getDataJSON, removeData };","map":{"version":3,"sources":["/Users/rafsan/Documents/GitHub/practice_cell/blog/src/functions/AsyncStorageFunctions.js"],"names":["AsyncStorage","storeData","key","value","setItem","console","log","storeDataJSON","jsonValue","JSON","stringify","getAllKeys","keys","mergeData","mergeItem","clear","getAllData","then","multiGet","result","catch","e","getData","getItem","data","getDataJSON","jsonData","parse","removeData","removeItem"],"mappings":"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","sourcesContent":["import {AsyncStorage} from 'react-native';\n\nconst storeData = async (key, value) => {\n  try {\n    await AsyncStorage.setItem(key, value);\n    console.log(\"Data Stored Successfully!\");\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n\nconst storeDataJSON = async (key, value) => {\n  try {\n    const jsonValue = JSON.stringify(value);\n    await AsyncStorage.setItem(key, jsonValue);\n    console.log(\"Data Stored Successfully!\");\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getAllKeys = async()=>{\n  let keys = []\n  try {\n    keys = await AsyncStorage.getAllKeys();\n    return keys;\n  } catch(e) {\n     console.log(e)\n  }\n}\n\n\nconst mergeData=async(key,value)=>{\n  try{\n    await AsyncStorage.mergeItem(key,value);\n    return true;\n  }catch(e){console.log(e)}\n};\n\nconst clear =async()=>{\n  AsyncStorage.clear();\n};\n\n\nconst getAllData = () =>{\n  AsyncStorage.getAllKeys().then((keys) => {\n    return AsyncStorage.multiGet(keys)\n      .then((result) => {\n        // console.log(result);\n      }).catch((e) =>{\n        console.log(e);\n      });\n  });\n}\n\n  \n\nconst getData = async (key) => {\n  try {\n    let data = await AsyncStorage.getItem(key);\n    if (data != null) {\n      return data;\n    } else {\n      console.log(\"No data with this key!\");\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getDataJSON = async (key) => {\n  try {\n    let data = await AsyncStorage.getItem(key);\n    if (data != null) {\n      const jsonData = JSON.parse(data);\n      return jsonData;\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst removeData = async (key) => {\n  try {\n    await AsyncStorage.removeItem(key);\n    return true;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n\n\nexport { mergeData,clear,getAllData,getAllKeys,storeData, storeDataJSON, getData, getDataJSON, removeData };"]},"metadata":{},"sourceType":"module"}