{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"170042044.ipynb     ","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPMccCg3LM3XhkV3t19yf6M"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"V4xLdu0TMfTg","colab_type":"text"},"source":["#FUNCTIONS"]},{"cell_type":"code","metadata":{"id":"1zbh8WIQIrdo","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595832273600,"user_tz":-360,"elapsed":1505,"user":{"displayName":"Rafsan Jany, 170042044","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GguRqTTF3Hlfx3XJImNmpgw-HuYyd3bRWg3jMlB=s64","userId":"00408823122414387284"}}},"source":["\n","PC1=[]\n","PC2=[]\n","c=[]\n","d=[]\n","cc=[]\n","dd=[]\n","IP=[]\n","\n","E_XOR_K=[]\n","substitution=[]\n","permutation=[]\n","L_xor_P=[]\n","\n","\n","def l_shft(k, c):\n","    for _ in range(c):\n","        k = k[1:] + k[0]\n","    return (k)\n","\n","\n","def tbl_cnvrt(tbl, key):\n","    k = \"\"\n","    for i in tbl: k = k + key[i]\n","    return k\n","\n","\n","def key_gen(k, n):\n","    pc_1 = [16, 8, 0, 17, 9, 1, 18, 10, 2, 22, 14, 6, 21, 13, 5, 20, 12, 4, 19, 11, 3]\n","    pc_2 = [16, 10, 0, 4, 2, 14, 5, 17, 9, 18, 11, 3, 7, 15, 8, 19, 12, 1]\n","    kx = tbl_cnvrt(pc_1, k).zfill(21)  # step-1: make a key with pc_1\n","    PC1.append(kx)\n","    C = kx[:10].zfill(10)\n","    D = kx[10:].zfill(11)  # step-2: devide the key into 2 part\n","    c.append(C)\n","    d.append(D)\n","    if n != 1: n = n + 1\n","    km = (l_shft(C, n) + l_shft(D, n)).zfill(18)  # step-3: left shift both part respect of key no. if its 1st key then 1 time l shft, if 2nd key then 3 time l shift of those 2 part.\n","    c.append(C)\n","    d.append(D)\n","    cc.append(l_shft(C, n))\n","    dd.append(l_shft(D, n))\n","    key = tbl_cnvrt(pc_2, km).zfill(18)  # step-4: add those 2 part and compare with pc_2, to find the final key\n","    PC2.append(key)\n","    return key\n","\n","\n","def rounds(L, R, rou, key):\n","    ex_tbl = [11, 0, 1, 2, 3, 4, 3, 4, 5, 6, 7, 8, 7, 8, 9, 10, 11, 0]\n","    ex_R = tbl_cnvrt(ex_tbl, R).zfill(18)  # step-1 : expend R with ex_tbl into 8 bits\n","    k = key_gen(key, rou).zfill(18)\n","    xor_k1R = bin(int(ex_R, 2) ^ int(k, 2))[2:].zfill(18)  # step-2: R XOR k1\n","    E_XOR_K.append(xor_k1R)\n","    s1_box = [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],\n","              [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],\n","              [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],\n","              [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]]\n","    s2_box = [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],\n","              [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],\n","              [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],\n","              [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]]\n","    s3_box = [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],\n","              [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],\n","              [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],\n","              [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]]\n","    n1 = int(xor_k1R[0] + xor_k1R[5], 2)  # step-3: finding the index\n","    n2 = int(xor_k1R[1] + xor_k1R[4] + xor_k1R[2] + xor_k1R[3], 2)\n","\n","    n3 = int(xor_k1R[6] + xor_k1R[11], 2)\n","    n4 = int(xor_k1R[7] + xor_k1R[8] + xor_k1R[9] + xor_k1R[10], 2)\n","\n","    n5 = int(xor_k1R[12] + xor_k1R[17], 2)\n","    n6 = int(xor_k1R[13] + xor_k1R[14] + xor_k1R[15] + xor_k1R[16], 2)\n","\n","    sub = ((bin(s1_box[n1][n2]))[2:].zfill(4) + bin(s2_box[n3][n4])[2:].zfill(4) + bin(s3_box[n5][n6])[2:].zfill(\n","        4)).zfill(12)  # step-6: got sub valued\n","    substitution.append(sub)\n","    p_box = [6, 11, 0, 4, 9, 1, 7, 2, 8, 5, 10, 3]\n","    re_or = tbl_cnvrt(p_box, sub).zfill(12)  # step-4: reorder with p-box\n","    permutation.append(re_or)\n","    R_f = xor_k1R = bin(int(re_or, 2) ^ int(L, 2))[2:].zfill(12)  # step-8: re_ord XOR L to get final R\n","    L_xor_P.append(R_f)\n","    L_f = R  # step-5: old R will be the filnal L\n","    return L_f, R_f\n","\n","\n","def DES(text, key, method):\n","    ip = [17, 9, 1, 19, 11, 3, 21, 13, 5, 23, 15, 7, 16, 8, 0, 18, 10, 2, 20, 12, 4, 22, 14, 6]\n","    ip_invrs = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","    for i in ip:\n","        ip_invrs[i] = ip.index(i)\n","\n","    pt = tbl_cnvrt(ip, text)\n","    IP.append(pt)\n","    L = pt[:12].zfill(12)\n","    R = pt[12:].zfill(12)\n","\n","    if method == \"E\" or method == \"e\":\n","        for i in range(1, 7):\n","            L, R = rounds(L, R, i, key)\n","\n","    elif method == \"D\" or method == \"d\":\n","        for i in range(1, 7):\n","            L, R = rounds(L, R, 7 - i, key)\n","\n","    swaped = R + L\n","\n","    text = tbl_cnvrt(ip_invrs, swaped)\n","    return text"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"usSb2tKfMKc3","colab_type":"text"},"source":["#INPUTS"]},{"cell_type":"code","metadata":{"id":"vJDQhTTZMEXK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":50},"executionInfo":{"status":"ok","timestamp":1595832309210,"user_tz":-360,"elapsed":1232,"user":{"displayName":"Rafsan Jany, 170042044","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GguRqTTF3Hlfx3XJImNmpgw-HuYyd3bRWg3jMlB=s64","userId":"00408823122414387284"}},"outputId":"1f478098-01de-4b0a-d13d-030cda3c084f"},"source":["input_plain_text=\"01AB23\"\n","input_key=\"23BA10\"\n","\n","\n","\n","plain_text=bin(int(input_plain_text,16))[2:].zfill(24)\n","key=bin(int(input_key,16))[2:].zfill(24)\n","\n","print(\"Given Plain text:\",plain_text)\n","print(\"Given Key:\",key)"],"execution_count":20,"outputs":[{"output_type":"stream","text":["Given Plain text: 000000011010101100100011\n","Given Key: 001000111011101000010000\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"kZcSgCuPNn0D","colab_type":"text"},"source":["#ALL OUTPUTS"]},{"cell_type":"code","metadata":{"id":"dqI6MR2hNmPu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1595832314064,"user_tz":-360,"elapsed":1157,"user":{"displayName":"Rafsan Jany, 170042044","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GguRqTTF3Hlfx3XJImNmpgw-HuYyd3bRWg3jMlB=s64","userId":"00408823122414387284"}},"outputId":"6e2fe4f2-424a-46a4-fa21-016d33cc52ed"},"source":["\n","cipher=DES(plain_text,key,\"E\")\n","\n","\n","\n","\n","\n","\n","print(\"Sub Key Genaration\")\n","print()\n","for i in range(6):\n","    print(\"KEY-\",i+1)\n","    print(\"PC_1:\",PC1[i])\n","    print(\"C\"+str(i)+\": \"+str(c[i]))\n","    print(\"D\"+str(i)+\": \"+str(d[i]))\n","    print(\"C\"+str(i+1)+\": \"+str(cc[i]))\n","    print(\"D\"+str(i+1)+\": \"+str(dd[i]))\n","    print(\"PC2:\",PC2[i])\n","    print(\"Key-\"+str(i+1)+\": \"+str(PC2[i]))\n","    print()\n","\n","\n","print()\n","print(\"ENCRYPTION\")\n","print(\"--------------------------------------------------------------\")\n","print()\n","print(\"IP: \",IP)\n","print()\n","for i in range(6):\n","    print(\"ROUND-\",i+1)\n","    print(\"E_XOR_K:\",E_XOR_K[i])\n","    print(\"Substitution:\",substitution[i])\n","    print(\"Permutation\",permutation[i])\n","    print(\"L_XOR_P:\",L_xor_P[i])\n","    print()\n","print(\"IP_inverse\",cipher)\n","print(\"Cipher:\",cipher)\n","\n","\n","E_XOR_K=[]\n","substitution=[]\n","permutation=[]\n","L_xor_P=[]\n","IP=[]\n","\n","\n","print()\n","print()\n","print(\"DECCRYPTION\")\n","print(\"--------------------------------------------------------------\")\n","p_tex=DES(cipher,key,\"D\")\n","print()\n","print(\"IP: \",IP)\n","print()\n","for i in range(6):\n","    print(\"ROUND-\",i+1)\n","    print(\"E_XOR_K:\",E_XOR_K[i])\n","    print(\"Substitution:\",substitution[i])\n","    print(\"Permutation\",permutation[i])\n","    print(\"L_XOR_P:\",L_xor_P[i])\n","    print()\n","\n","print(\"IP_inverse\",p_tex)\n","print(\"Plain Text:\",p_tex)\n","\n","print(\"FINAL OUTPUT\",hex(int(p_tex,2))[2:].upper())"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Sub Key Genaration\n","\n","KEY- 1\n","PC_1: 011000011011000011011\n","C0: 0110000110\n","D0: 11000011011\n","C1: 1100001100\n","D1: 10000110111\n","PC2: 111000000100110101\n","Key-1: 111000000100110101\n","\n","KEY- 2\n","PC_1: 011000011011000011011\n","C1: 0110000110\n","D1: 11000011011\n","C2: 0000110011\n","D2: 00011011110\n","PC2: 100101111100001100\n","Key-2: 100101111100001100\n","\n","KEY- 3\n","PC_1: 011000011011000011011\n","C2: 0110000110\n","D2: 11000011011\n","C3: 0001100110\n","D3: 00110111100\n","PC2: 100100010101111010\n","Key-3: 100100010101111010\n","\n","KEY- 4\n","PC_1: 011000011011000011011\n","C3: 0110000110\n","D3: 11000011011\n","C4: 0011001100\n","D4: 01101111000\n","PC2: 100011010011110010\n","Key-4: 100011010011110010\n","\n","KEY- 5\n","PC_1: 011000011011000011011\n","C4: 0110000110\n","D4: 11000011011\n","C5: 0110011000\n","D5: 11011110000\n","PC2: 110011100010010001\n","Key-5: 110011100010010001\n","\n","KEY- 6\n","PC_1: 011000011011000011011\n","C5: 0110000110\n","D5: 11000011011\n","C6: 1100110000\n","D6: 10111100001\n","PC2: 011101100000010011\n","Key-6: 011101100000010011\n","\n","\n","ENCRYPTION\n","--------------------------------------------------------------\n","\n","IP:  ['000000000101111100101001', '000000000111010110010110']\n","\n","ROUND- 1\n","E_XOR_K: 100011000101000000\n","Substitution: 010001001010\n","Permutation 000001001110\n","L_XOR_P: 000001001011\n","\n","ROUND- 2\n","E_XOR_K: 010011101011000111\n","Substitution: 100111111001\n","Permutation 111100101101\n","L_XOR_P: 000000000100\n","\n","ROUND- 3\n","E_XOR_K: 100011010011111010\n","Substitution: 010000001010\n","Permutation 000001001010\n","L_XOR_P: 000000000001\n","\n","ROUND- 4\n","E_XOR_K: 000100010101111000\n","Substitution: 010000010101\n","Permutation 010011100000\n","L_XOR_P: 010011100100\n","\n","ROUND- 5\n","E_XOR_K: 101100100000000100\n","Substitution: 100000001001\n","Permutation 011000001000\n","L_XOR_P: 011000001001\n","\n","ROUND- 6\n","E_XOR_K: 010100000101100111\n","Substitution: 101001000000\n","Permutation 001000010100\n","L_XOR_P: 011011110000\n","\n","IP_inverse 111000111001011000000000\n","Cipher: 111000111001011000000000\n","\n","\n","DECCRYPTION\n","--------------------------------------------------------------\n","\n","IP:  ['001010010001011001000011']\n","\n","ROUND- 1\n","E_XOR_K: 100001001010010101\n","Substitution: 111110110101\n","Permutation 111111110001\n","L_XOR_P: 110101100000\n","\n","ROUND- 2\n","E_XOR_K: 101000001100010010\n","Substitution: 111000111101\n","Permutation 111011111000\n","L_XOR_P: 100010111011\n","\n","ROUND- 3\n","E_XOR_K: 010010000100110111\n","Substitution: 010110000011\n","Permutation 010101000011\n","L_XOR_P: 100000100011\n","\n","ROUND- 4\n","E_XOR_K: 110101010001110101\n","Substitution: 101111001110\n","Permutation 001110011111\n","L_XOR_P: 101100100100\n","\n","ROUND- 5\n","E_XOR_K: 110010000000010101\n","Substitution: 001111110101\n","Permutation 110110110101\n","L_XOR_P: 010110010110\n","\n","ROUND- 6\n","E_XOR_K: 010011100110011100\n","Substitution: 100110110010\n","Permutation 101100100011\n","L_XOR_P: 000000000111\n","\n","IP_inverse 000000011010101100100011\n","Plain Text: 000000011010101100100011\n","FINAL OUTPUT 1AB23\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RMzuMCnwO4pF","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595832273612,"user_tz":-360,"elapsed":1417,"user":{"displayName":"Rafsan Jany, 170042044","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GguRqTTF3Hlfx3XJImNmpgw-HuYyd3bRWg3jMlB=s64","userId":"00408823122414387284"}}},"source":[""],"execution_count":18,"outputs":[]}]}